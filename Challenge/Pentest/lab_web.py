# lab_web_v2.py
from flask import Flask, request, g
import sqlite3
import subprocess

app = Flask(__name__)
DATABASE = './lab.db'

def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect(DATABASE)
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db:
        db.close()

# Tạo bảng users và chèn user mẫu
def init_db():
    db = get_db()
    cursor = db.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE,
            password TEXT
        )
    ''')
    cursor.execute('INSERT OR IGNORE INTO users (username, password) VALUES (?, ?)', ('admin', 'admin123'))
    db.commit()

@app.route('/')
def index():
    name = request.args.get('name', 'Guest')
    # Vẫn có XSS lỗ hổng
    return f"<h1>Welcome, {name}!</h1>"

# SQL Injection vulnerable login
@app.route('/login', methods=['GET'])
def login():
    username = request.args.get('username', '')
    password = request.args.get('password', '')
    db = get_db()
    cursor = db.cursor()

    # LỖ HỔNG: Không dùng tham số, concat trực tiếp chuỗi -> SQL Injection
    query = f"SELECT * FROM users WHERE username='{username}' AND password='{password}'"
    cursor.execute(query)
    user = cursor.fetchone()

    if user:
        return "Login successful! Secret flag: FLAG{sql_injection_here}"
    else:
        return "Login failed!"

# Command Injection vulnerable endpoint
@app.route('/ping', methods=['GET'])
def ping():
    ip = request.args.get('ip', '')
    # LỖ HỔNG: chạy trực tiếp lệnh shell không kiểm soát
    command = f"ping -c 3 {ip}"
    try:
        output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT, timeout=5)
        return f"<pre>{output.decode()}</pre>"
    except Exception as e:
        return f"Error: {str(e)}"

if __name__ == '__main__':
    with app.app_context():
        init_db()
    app.run(host='0.0.0.0', port=8080)
